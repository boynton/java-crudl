//
// This file generated by rdl 1.5.1. Do not modify!
//
package com.boynton.store;

import java.util.*;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import static javax.ws.rs.core.Response.Status;

@Path("/store")
public class Resources {

    @Inject private StorageProvider store;

    @POST
    @Path("/items")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Item createItem(Item item) {
        try {
            if (item.id != null) {
                System.out.println("Warning: item.id on create is ignored, will be assigned by server");
            }
            store.createItem(item);
            return store.readItem(item.id);
        } catch (StorageException e) {
            error(Status.INTERNAL_SERVER_ERROR, e.getMessage());
            return null;
        }
    }

    @GET
    @Path("/items/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Item readItem(@PathParam("id") String id, @QueryParam("fields") String fields) {
        Item item = null;
        try {
            item = store.readItem(id);
            if (item == null) {
                error(Status.NOT_FOUND, "No such item: '" + id + "'");
            }
            //filter fields
        } catch (StorageException e) {
            e.printStackTrace();
            error(Status.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return item;
    }

    @PUT
    @Path("/items/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Item updateItem(@PathParam("id") String id, Item item) {
        try {
            if (!id.equals(item.id)) {
                error(Status.BAD_REQUEST, "id mismatch: '" + id + "' and '" + item.id + "'");
            }
            store.updateItem(item);
            //item = store.readItem(item.id); //if store changes the item when writing it, we should fetch again
        } catch (StorageException e) {
            e.printStackTrace();
            error(Status.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return item;
    }

    @DELETE
    @Path("/items/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Item deleteItem(@PathParam("id") String id) {
        try {
            Item item = store.readItem(id);
            if (item == null) {
                error(Status.NOT_FOUND, "No such item: '" + id + "'");
            }
            store.deleteItem(id);
        } catch (StorageException e) {
            e.printStackTrace();
            error(Status.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return null;
    }

    @GET
    @Path("/items")
    @Produces(MediaType.APPLICATION_JSON)
    public Items listItems(@QueryParam("limit") Integer limit, @QueryParam("skip") String skip, @QueryParam("fields") String fields) {
        Items items = null;
        try {
            items = store.listItems(limit, skip);
        } catch (StorageException e) {
            e.printStackTrace();
            error(Status.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return items;
    }

    void error(Status code, String msg) {
        String text = code.getStatusCode() + " " + code + ": " + msg;
        debug(text);
        throw new WebApplicationException(Response.status(code).entity("{\"error\":{\"code\":" + code.getStatusCode() + ",\"message\":\"" + msg +"\"}}").build());
    }

    void debug(String s) {
        System.out.println(s);
    }

}
